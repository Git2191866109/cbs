/* Generated By:JavaCC: Do not edit this line. ExpressionParser.java */
/** New line translator. */
package com.bs.core.parser;

public class ExpressionParser implements ExpressionParserConstants {
	@SuppressWarnings("unused")
	private static double x;

	public ExpressionParser(String expression) {
		this(new java.io.StringReader(expression));
	}

	@SuppressWarnings("static-access")
	public ExpressionParser(String expression, double x) {
		this(new java.io.StringReader(expression));
		this.x = x;
	}

	/** Main entry point. */
	public static double calculate(String exp) throws ParseException {
		double rd = 0;
		java.io.StringReader stringReader = new java.io.StringReader(exp);
		ExpressionParser parser = new ExpressionParser(stringReader);
		try {
			rd = parser.condition();
			if (stringReader != null)
				stringReader.close();
			System.out.println("expression:" + exp);
			System.out.println("result:" + rd);
			return rd;
		} catch (ParseException pe) {
			pe.printStackTrace();
			throw pe;
		} catch (Exception e) {
			e.printStackTrace();
			// throw e;
		}
		return rd;
	}

	@SuppressWarnings("unused")
	final public double plusAndMinus() throws ParseException {
		Token t;
		double result = 0;
		double i = 0;
		result = timesAndDivide();
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
			case MINUS:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case PLUS:
				jj_consume_token(PLUS);
				i = timesAndDivide();
				result += i;
				break;
			case MINUS:
				jj_consume_token(MINUS);
				i = timesAndDivide();
				result -= i;
				break;
			default:
				jj_la1[1] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double primary() throws ParseException {
		Token t;
		double d;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NUMBER:
			d = doNumber();
			{
				if (true)
					return d;
			}
			break;
		case OPEN_PAR:
			d = calculatorPar();
			{
				if (true)
					return d;
			}
			break;
		case MINUS:
			jj_consume_token(MINUS);
			d = primary();
			{
				if (true)
					return d;
			}
			break;
		case ABS:
		case SIN:
		case COS:
		case LOG:
		case LOG10:
		case SQRT:
		case TAN:
			d = doFunction();
			{
				if (true)
					return d;
			}
			break;
		default:
			jj_la1[2] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double timesAndDivide() throws ParseException {
		double result = 0;
		double i = 0;
		result = primary();
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case TIMES:
			case DIVIDE:
				;
				break;
			default:
				jj_la1[3] = jj_gen;
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case TIMES:
				jj_consume_token(TIMES);
				i = primary();
				result *= i;
				break;
			case DIVIDE:
				jj_consume_token(DIVIDE);
				i = primary();
				result /= i;
				break;
			default:
				jj_la1[4] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double doFunction() throws ParseException {
		double arg = 0;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SIN:
			jj_consume_token(SIN);
			arg = calculatorPar();
			{
				if (true)
					return Math.sin(arg);
			}
			break;
		case COS:
			jj_consume_token(COS);
			arg = calculatorPar();
			{
				if (true)
					return Math.cos(arg);
			}
			break;
		case ABS:
			jj_consume_token(ABS);
			arg = calculatorPar();
			{
				if (true)
					return Math.abs(arg);
			}
			break;
		case TAN:
			jj_consume_token(TAN);
			arg = calculatorPar();
			{
				if (true)
					return Math.tan(arg);
			}
			break;
		case LOG:
			jj_consume_token(LOG);
			arg = calculatorPar();
			{
				if (true)
					return Math.log(arg);
			}
			break;
		case LOG10:
			jj_consume_token(LOG10);
			arg = calculatorPar();
			{
				if (true)
					return Math.log10(arg);
			}
			break;
		case SQRT:
			jj_consume_token(SQRT);
			arg = calculatorPar();
			{
				if (true)
					return Math.sqrt(arg);
			}
			break;
		default:
			jj_la1[5] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double doNumber() throws ParseException {
		Token t;
		double d;
		double result;
		result = getNumber();
		label_3: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ABS:
			case SIN:
			case COS:
			case LOG:
			case LOG10:
			case SQRT:
			case TAN:
			case OPEN_PAR:
				;
				break;
			default:
				jj_la1[6] = jj_gen;
				break label_3;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OPEN_PAR:
				d = calculatorPar();
				result = d * result;
				break;
			case ABS:
			case SIN:
			case COS:
			case LOG:
			case LOG10:
			case SQRT:
			case TAN:
				d = doFunction();
				result = d * result;
				break;
			default:
				jj_la1[7] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		{
			if (true)
				return result;
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double getNumber() throws ParseException {
		Token t;
		double result = 1;
		t = jj_consume_token(NUMBER);
		result = Double.parseDouble(t.image);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double calculatorPar() throws ParseException {
		double d;
		jj_consume_token(OPEN_PAR);
		d = plusAndMinus();
		jj_consume_token(CLOSE_PAR);
		{
			if (true)
				return d;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public boolean compare() throws ParseException {
		double a;
		double b;
		boolean result;
		a = plusAndMinus();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case EQUALS:
			jj_consume_token(EQUALS);
			b = plusAndMinus();
			result = (a == b);
			break;
		case BIGGERTHEN:
			jj_consume_token(BIGGERTHEN);
			b = plusAndMinus();
			result = (a > b);
			break;
		case SMALLERTHEN:
			jj_consume_token(SMALLERTHEN);
			b = plusAndMinus();
			result = (a < b);
			break;
		case NOTSMALLERTHEN:
			jj_consume_token(NOTSMALLERTHEN);
			b = plusAndMinus();
			result = (a >= b);
			break;
		case NOTBIGGERTHEN:
			jj_consume_token(NOTBIGGERTHEN);
			b = plusAndMinus();
			result = (a <= b);
			break;
		case NOTEQUALS:
			jj_consume_token(NOTEQUALS);
			b = plusAndMinus();
			result = (a != b);
			break;
		default:
			jj_la1[8] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public boolean strCompare() throws ParseException {
		String a;
		String b;
		boolean result;
		a = getString();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case EQUALS:
			jj_consume_token(EQUALS);
			b = getString();
			result = (a.compareTo(b) == 0);
			break;
		case BIGGERTHEN:
			jj_consume_token(BIGGERTHEN);
			b = getString();
			result = (a.compareTo(b) > 0);
			break;
		case SMALLERTHEN:
			jj_consume_token(SMALLERTHEN);
			b = getString();
			result = (a.compareTo(b) < 0);
			break;
		case NOTSMALLERTHEN:
			jj_consume_token(NOTSMALLERTHEN);
			b = getString();
			result = (a.compareTo(b) >= 0);
			break;
		case NOTBIGGERTHEN:
			jj_consume_token(NOTBIGGERTHEN);
			b = getString();
			result = (a.compareTo(b) <= 0);
			break;
		case NOTEQUALS:
			jj_consume_token(NOTEQUALS);
			b = getString();
			result = (a.compareTo(b) != 0);
			break;
		default:
			jj_la1[9] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public String getString() throws ParseException {
		Token t;
		String result = "";
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case STRING:
			t = jj_consume_token(STRING);
			result = t.image;
			break;
		case NULL:
			t = jj_consume_token(NULL);
			result = "";
			break;
		default:
			jj_la1[10] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public boolean wrappedCompare() throws ParseException {
		boolean a;
		boolean b;
		boolean result;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case STRING:
		case NULL:
			a = strCompare();
			result = a;
			break;
		case ABS:
		case SIN:
		case COS:
		case LOG:
		case LOG10:
		case SQRT:
		case TAN:
		case MINUS:
		case NUMBER:
		case OPEN_PAR:
			b = compare();
			result = b;
			break;
		default:
			jj_la1[11] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public boolean logicalCalculus() throws ParseException {
		boolean a;
		boolean b;
		Token t;
		boolean result;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case ABS:
		case SIN:
		case COS:
		case LOG:
		case LOG10:
		case SQRT:
		case TAN:
		case MINUS:
		case STRING:
		case NUMBER:
		case OPEN_PAR:
		case NULL:
			a = wrappedCompare();
			result = a;
			label_4: while (true) {
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case AND:
				case OR:
					;
					break;
				default:
					jj_la1[12] = jj_gen;
					break label_4;
				}
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case AND:
					jj_consume_token(AND);
					b = wrappedCompare();
					result = (result && b);
					break;
				case OR:
					jj_consume_token(OR);
					b = wrappedCompare();
					result = (result || b);
					break;
				default:
					jj_la1[13] = jj_gen;
					jj_consume_token(-1);
					throw new ParseException();
				}
			}
			break;
		case TRUE:
			t = jj_consume_token(TRUE);
			result = true;
			break;
		case FALSE:
			t = jj_consume_token(FALSE);
			result = false;
			break;
		default:
			jj_la1[14] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public boolean isOrNot() throws ParseException {
		boolean a;
		boolean result;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case NOT:
			jj_consume_token(NOT);
			jj_consume_token(OPEN_PAR);
			a = logicalCalculus();
			jj_consume_token(CLOSE_PAR);
			result = !a;
			break;
		case ABS:
		case SIN:
		case COS:
		case LOG:
		case LOG10:
		case SQRT:
		case TAN:
		case MINUS:
		case STRING:
		case NUMBER:
		case OPEN_PAR:
		case NULL:
		case TRUE:
		case FALSE:
			a = logicalCalculus();
			result = a;
			break;
		default:
			jj_la1[15] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	@SuppressWarnings("unused")
	final public double condition() throws ParseException {
		boolean a;
		boolean b = false;
		double c;
		double d = 0.0;
		double e = 0.0;
		jj_consume_token(IF);
		jj_consume_token(OPEN_PAR);
		a = isOrNot();
		jj_consume_token(CLOSE_PAR);
		jj_consume_token(OPEN_BRACE);
		c = plusAndMinus();
		jj_consume_token(SEMICOLON);
		jj_consume_token(CLOSE_BRACE);
		if (a) {
			if (true)
				return c;
		}
		label_5: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ELSEIF:
				;
				break;
			default:
				jj_la1[16] = jj_gen;
				break label_5;
			}
			jj_consume_token(ELSEIF);
			jj_consume_token(OPEN_PAR);
			b = isOrNot();
			jj_consume_token(CLOSE_PAR);
			jj_consume_token(OPEN_BRACE);
			d = plusAndMinus();
			jj_consume_token(SEMICOLON);
			jj_consume_token(CLOSE_BRACE);
			if (b) {
				if (true)
					return d;
			}
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case ELSE:
			jj_consume_token(ELSE);
			jj_consume_token(OPEN_BRACE);
			e = plusAndMinus();
			jj_consume_token(SEMICOLON);
			jj_consume_token(CLOSE_BRACE);
			{
				if (true)
					return e;
			}
			break;
		default:
			jj_la1[17] = jj_gen;
			;
		}
		{
			if (true)
				return e;
		}
		throw new Error("Missing return statement in function");
	}

	public ExpressionParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	public Token token, jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[18];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_0();
		jj_la1_1();
	}

	private static void jj_la1_0() {
		jj_la1_0 = new int[] { 0x3000000, 0x3000000, 0x22007f00, 0xc000000,
				0xc000000, 0x7f00, 0x7f00, 0x7f00, 0x1f8000, 0x1f8000,
				0x10000000, 0x32007f00, 0x600000, 0x600000, 0x32007f00,
				0x32807f00, 0x40, 0x80, };
	}

	private static void jj_la1_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0,
				0x0, 0x80, 0x81, 0x0, 0x0, 0x381, 0x381, 0x0, 0x0, };
	}

	public ExpressionParser(java.io.InputStream stream) {
		this(stream, null);
	}

	public ExpressionParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new ExpressionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	public ExpressionParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new ExpressionParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	public ExpressionParser(ExpressionParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	public void ReInit(ExpressionParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 18; i++)
			jj_la1[i] = -1;
	}

	final private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	final private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	@SuppressWarnings("rawtypes")
	private java.util.Vector jj_expentries = new java.util.Vector();
	private int[] jj_expentry;
	private int jj_kind = -1;

	@SuppressWarnings("unchecked")
	public ParseException generateParseException() {
		jj_expentries.removeAllElements();
		boolean[] la1tokens = new boolean[42];
		for (int i = 0; i < 42; i++) {
			la1tokens[i] = false;
		}
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 18; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 42; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.addElement(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = (int[]) jj_expentries.elementAt(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	final public void enable_tracing() {
	}

	final public void disable_tracing() {
	}

}
